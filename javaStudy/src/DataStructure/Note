*-----------------LinkedList----------------*
LinkedList = ArraList와 함께 List를 구체화한 클래스
각각의 데이터가 노드(다음 노드와 이전 노드를 가지고 있다)로 구성되어 연결되는 구조
데이터를 추가, 삭제하는 것이 용이(ArrayList는 검색에 용이)

노드 : 데이터 저장 단위(데이터값, 포인터)로 구성
포인터 : 다음이나 이전 노드와의 연결정보를 가지고 있는 공간

import java.util.LinkedList;

LinkedList<Integer> integers1 = new LinkedList<Integer>(); // 타입 지정
LinkedList<Integer> integers2 = new LinkedList<>(); // 타입 생략 가능
LinkedList<Integer> integers3 = new LinkedList<>(integers1); // 다른 Collection값으로 초기화
LinkedList<Integer> integers4 = new LinkedList<>(Arrays.asList(1, 2, 3, 4, 5)); // 한 번에 여러 개의 값 초기화.
장점 : 미리 데이터 공간을 할당하지 않아도 된다.
단점 : 연결을 위한 별도 데이터 공간이 필요하므로, 저장공간 효율이 높지 않음
	  연결 정보를 찾는 시간이 필요하므로 접근 속도가 느림
	  중간 데이터 삭제 시, 앞뒤 데이터의 연결을 재구성해야 하는 부가적인 작업 필요

add()에 인덱스를 지정하지 않으면 가장 끝에 값이 추가됩니다.

LinkedList는 값을 찾아갈 때 처음부터 순차적으로 찾아갑니다.
그래서 값 추가 시 순차적으로 탐색할 것 같지만 그렇게 동작하지는 않습니다.
내부적으로 last라는 변수가 마지막 노드를 가리키고 있어서 이 변수에 바로 연결합니다.
그렇기 때문에 끝 부분에 추가할 때는 순차적인 탐색 없이 바로  마지막에 연결이 가능합니다.

remove()는 인덱스를 입력하거나 값을 직접 입력해서 호출 가능합니다.
인덱스로 삭제하는 경우 값을 리턴 받을 수 있는데 삭제와 동시에 추가 작업이 필요한 경우 활용 가능합니다.

값을 전체 삭제하고 싶은 경우 clear()

전체 값 확인하는 방법.
  //   for-each loop
        for (String color : colors) {
            System.out.print(color + "  ");
        }
        System.out.println();

        // for loop
        for (int i = 0; i < colors.size(); ++i) {
            System.out.print(colors.get(i) + "  ");
        }
        System.out.println();

        // using iterator
        Iterator<T> iterator = colors.iterator();
        while (iterator.hasNext()) {
            System.out.print(iterator.next() + "  ");
        }
        System.out.println();

        // using listIterator (역순)
        ListIterator<T> listIterator = colors.listIterator(colors.size());
        while (listIterator.hasPrevious()) {
            System.out.print(listIterator.previous() + "  ");
        }
        System.out.println();
        
값이 존재하는지 알고 싶은 경우 contains()를 호출하면 됩니다.
indexOf()를 사용하면 값이 존재하는지 여부와 존재 시 위치를 알 수 있습니다.
